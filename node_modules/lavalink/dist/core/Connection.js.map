{"version":3,"sources":["core/Connection.ts"],"names":[],"mappings":"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","file":"Connection.js","sourcesContent":["import * as WebSocket from 'ws';\nimport Node from '../base/Node';\n\ninterface Sendable {\n  resolve: () => void;\n  reject: (e: Error) => void;\n  data: Buffer | string;\n}\n\nexport default class Connection {\n  public readonly node: Node;\n  public url: string;\n  public options: WebSocket.ClientOptions;\n\n  public ws!: WebSocket;\n  public reconnectTimeout = 500;\n\n  private _listeners = {\n    open: () => {\n      this.reconnectTimeout = 500;\n      this._flush();\n    },\n    close: async () => {\n      await new Promise(r => setTimeout(r, this.reconnectTimeout *= 2));\n      this.connect();\n    },\n    message: (d: WebSocket.Data) => {\n      let buf: Buffer | string;\n\n      if (Buffer.isBuffer(d)) buf = d;\n      else if (Array.isArray(d)) buf = Buffer.concat(d);\n      else if (d instanceof ArrayBuffer) buf = Buffer.from(d);\n      else buf = d;\n\n      const pk: any = JSON.parse(buf.toString());\n      if (pk.guildId) this.node.players.get(pk.guildId).emit(pk.op, pk);\n      this.node.emit(pk.op, pk);\n    },\n    error: (err: any) => {\n      this.node.emit('error', err);\n      if (this.ws.readyState !== WebSocket.OPEN) this._listeners.close();\n    },\n  };\n\n  private _queue: Array<Sendable> = [];\n\n  constructor(client: Node, url: string, options: WebSocket.ClientOptions = {}) {\n    this.node = client;\n    this.url = url;\n    this.options = options;\n\n    this._send = this._send.bind(this);\n    this.connect();\n  }\n\n  public connect() {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) this.ws.close();\n\n    const headers = {\n      Authorization: this.node.password,\n      'Num-Shards': this.node.shardCount || 1,\n      'User-Id': this.node.userID,\n    };\n\n    this.ws = new WebSocket(this.url, Object.assign({ headers }, this.options));\n    this._registerWSEventListeners();\n  }\n\n  public send(d: object): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const encoded = JSON.stringify(d);\n      const send = { resolve, reject, data: encoded };\n\n      if (this.ws.readyState === WebSocket.OPEN) this._send(send);\n      else this._queue.push(send);\n    });\n  }\n\n  private _registerWSEventListeners() {\n    for (const [event, listener] of Object.entries(this._listeners)) {\n      if (!this.ws.listeners(event).includes(listener)) this.ws.on(event, listener);\n    }\n  }\n\n  private async _flush() {\n    await Promise.all(this._queue.map(this._send));\n  }\n\n  private _send({ resolve, reject, data }: Sendable) {\n    this.ws.send(data, (err) => {\n      if (err) reject(err);\n      else resolve();\n    });\n  }\n}\n"],"sourceRoot":"../../src"}