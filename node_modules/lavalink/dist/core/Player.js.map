{"version":3,"sources":["core/Player.ts"],"names":[],"mappings":"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","file":"Player.js","sourcesContent":["import Node, { VoiceServerUpdate, VoiceStateUpdate } from '../base/Node';\nimport { Track } from './Http';\nimport { EventEmitter } from 'events';\n\nexport enum Status {\n  INSTANTIATED,\n  PLAYING,\n  PAUSED,\n  ENDED,\n  ERRORED,\n  STUCK\n}\n\nexport default class Player extends EventEmitter {\n  public readonly node: Node;\n  public guildID: string;\n  public status: Status = Status.INSTANTIATED;\n\n  constructor(node: Node, guildID: string) {\n    super();\n    this.node = node;\n    this.guildID = guildID;\n\n    this.on('event', (d) => {\n      if (d.type === 'TrackEndEvent') {\n        if (d.reason !== 'REPLACED') this.status = Status.ENDED;\n      } else if (d.type === 'TrackExceptionEvent') {\n        this.status = Status.ERRORED;\n      } else {\n        this.status = Status.STUCK;\n      }\n    });\n  }\n\n  public get playing(): boolean {\n    return this.status === Status.PLAYING;\n  }\n\n  public get paused(): boolean {\n    return this.status === Status.PAUSED;\n  }\n\n  public get voiceState(): VoiceStateUpdate | undefined {\n    const session = this.node.voiceStates.get(this.guildID);\n    if (!session) return;\n\n    return {\n      guild_id: this.guildID,\n      user_id: this.node.userID,\n      session_id: session,\n    };\n  }\n\n  public get voiceServer(): VoiceServerUpdate | undefined {\n    return this.node.voiceServers.get(this.guildID);\n  }\n\n  public async moveTo(node: Node) {\n    if (this.node === node) return;\n    if (!this.voiceServer || !this.voiceState) throw new Error('no voice state/server data to move');\n\n    await this.destroy();\n    await Promise.all([\n      node.voiceStateUpdate(this.voiceState),\n      node.voiceServerUpdate(this.voiceServer),\n    ]);\n  }\n\n  public leave() {\n    return this.node.send(this.guildID, {\n      op: 4,\n      d: {\n        guild_id: this.guildID,\n        channel_id: null,\n        self_mute: false,\n        self_deaf: false\n      },\n    });\n  }\n\n  public join(channel: string, { deaf = false, mute = false } = {}) {\n    this.node.voiceServers.delete(this.guildID);\n    this.node.voiceStates.delete(this.guildID);\n\n    return this.node.send(this.guildID, {\n      op: 4,\n      d: {\n        guild_id: this.guildID,\n        channel_id: channel,\n        self_deaf: deaf,\n        self_mute: mute,\n      },\n    })\n  }\n\n  public async play(track: string | Track, { start = 0, end = 0 }: { start?: number, end?: number } = {}) {\n    await this.send('play', {\n      track: typeof track === 'object' ? track.track : track,\n      startTime: start,\n      endTime: end,\n    });\n\n    this.status = Status.PLAYING;\n  }\n\n  public setVolume(vol: number) {\n    return this.send('volume', { volume: vol });\n  }\n\n  public seek(position: number) {\n    return this.send('seek', { position });\n  }\n\n  public async pause(paused: boolean = true) {\n    await this.send('pause', { pause: paused });\n\n    if (paused) this.status = Status.PAUSED;\n    else this.status = Status.PLAYING;\n  }\n\n  public async stop() {\n    await this.send('stop');\n    this.status = Status.ENDED;\n  }\n\n  public async destroy() {\n    await this.send('destroy');\n    this.status = Status.ENDED;\n    this.node.players.delete(this.guildID);\n  }\n\n  public voiceUpdate(sessionId: string, event: VoiceServerUpdate) {\n    return this.send('voiceUpdate', {\n      event,\n      sessionId,\n    });\n  }\n\n  public send(op: string, d: object = {}) {\n    const conn = this.node.connection;\n    if (conn) {\n      return conn.send(Object.assign({\n        op,\n        guildId: this.guildID,\n      }, d));\n    } else {\n      return Promise.reject(new Error('no WebSocket connection available'));\n    }\n  }\n}\n"],"sourceRoot":"../../src"}