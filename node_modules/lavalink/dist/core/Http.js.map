{"version":3,"sources":["core/Http.ts"],"names":[],"mappings":"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","file":"Http.js","sourcesContent":["import { request, IncomingMessage, IncomingHttpHeaders, STATUS_CODES } from 'http';\nimport { URL } from 'url';\nimport Node from '../base/Node';\n\nexport class HTTPError extends Error {\n  public readonly statusMessage!: string;\n  public method: string;\n  public statusCode: number;\n  public headers: IncomingHttpHeaders;\n  public path: string;\n  constructor(httpMessage: IncomingMessage, method: string, url: URL) {\n    super(`${httpMessage.statusCode} ${STATUS_CODES[httpMessage.statusCode as number]}`)\n    Object.defineProperty(this, 'statusMessage', { enumerable: true, get: function () { return STATUS_CODES[httpMessage.statusCode as number]} })\n    this.statusCode = httpMessage.statusCode as number;\n    this.headers = httpMessage.headers;\n    this.name = this.constructor.name;\n    this.path = url.toString();\n    this.method = method;\n  }\n}\n\nexport enum LoadType {\n  TRACK_LOADED = 'TRACK_LOADED',\n  PLAYLIST_LOADED = 'PLAYLIST_LOADED',\n  SEARCH_RESULT = 'SEARCH_RESULT',\n  NO_MATCHES = 'NO_MATCHES',\n  LOAD_FAILED = 'LOAD_FAILED'\n}\n\nexport interface TrackResponse {\n loadType: LoadType,\n playlistInfo: PlaylistInfo,\n tracks: Track[]\n}\n\nexport interface PlaylistInfo {\n  name?: string,\n  selectedTrack?: number\n}\n\nexport interface Track {\n  track: string;\n  info: {\n    identifier: string;\n    isSeekable: boolean;\n    author: string;\n    length: number;\n    isStream: boolean;\n    position: number;\n    title: string;\n    uri: string;\n  };\n}\n\nexport default class Http {\n  public readonly node: Node;\n  public input: string;\n  public base?: string;\n\n  constructor(node: Node, input: string, base?: string) {\n    this.node = node;\n    this.input = input;\n    this.base = base;\n  }\n\n  public url() {\n    return new URL(this.input, this.base);\n  }\n\n  public load(identifier: string): Promise<TrackResponse[]> {\n    const url = this.url();\n    url.pathname = '/loadtracks';\n    url.searchParams.append('identifier', identifier);\n\n    return this._make('GET', url);\n  }\n\n  public decode(track: string): Promise<Track>;\n  public decode(tracks: string[]): Promise<Track[]>;\n  public decode(tracks: string | string[]): Promise<Track | Track[]>;\n  public decode(tracks: string | string[]): Promise<Track | Track[]> {\n    const url = this.url();\n    if (Array.isArray(tracks)) {\n      url.pathname = '/decodetracks';\n      return this._make('POST', url, Buffer.from(JSON.stringify(tracks)));\n    } else {\n      url.pathname = '/decodetrack';\n      url.searchParams.append('track', tracks);\n      return this._make('GET', url);\n    }\n  }\n\n  private async _make<T = any>(method: string, url: URL, data?: Buffer): Promise<T> {\n    const message = await new Promise<IncomingMessage>((resolve) => {\n      const req = request({\n        method,\n        hostname: url.hostname,\n        port: url.port,\n        protocol: url.protocol,\n        path: url.pathname + url.search,\n        headers: {\n          Authorization: this.node.password,\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n      }, resolve);\n\n      if (data) req.write(data);\n      req.end();\n    });\n\n    if (message.statusCode && message.statusCode >= 200 && message.statusCode < 300) {\n      const chunks: Array<Buffer> = [];\n      message.on('data', (chunk) => {\n        if (typeof chunk === 'string') chunk = Buffer.from(chunk);\n        chunks.push(chunk);\n      });\n\n      return new Promise<T>((resolve, reject) => {\n        message.once('error', reject);\n        message.once('end', () => {\n          message.removeAllListeners();\n\n          try {\n            const data = Buffer.concat(chunks);\n            resolve(JSON.parse(data.toString()));\n          } catch (e) {\n            reject(e);\n          }\n        });\n      });\n    }\n\n    throw new HTTPError(message, method, url);\n  }\n}\n"],"sourceRoot":"../../src"}