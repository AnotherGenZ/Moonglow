{"version":3,"sources":["base/Cluster.ts"],"names":[],"mappings":";;AAAA,mCAAsC;AACtC,gDAAiE;AAIjE,MAA8B,OAAQ,SAAQ,qBAAY;IAMxD,YAAY,OAA8B;QACxC,KAAK,EAAE,CAAC;QAHM,UAAK,GAAkB,EAAE,CAAC;QAIxC,IAAI,OAAO;YAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACnC,CAAC;IAIM,KAAK,CAAC,OAAkD;QAC7D,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC;YAAE,OAAO,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QAEvE,MAAM,IAAI,GAAG,IAAI,qBAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC5C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtB,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,IAAI;QACT,mFAAmF;QACnF,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACtC,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,KAAK;gBAAE,OAAO,CAAC,CAAC,CAAC;YACpC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;kBACjE,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,GAAG,CAAC,OAAe;QACxB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;IAC5D,CAAC;IAEM,GAAG,CAAC,OAAe;QACxB,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;QAC9D,IAAI,CAAC,IAAI;YAAE,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;QACvE,IAAI,IAAI;YAAE,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC3C,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;IAC/E,CAAC;IAEM,gBAAgB,CAAC,KAAuB;QAC7C,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAC/D,CAAC;IAEM,iBAAiB,CAAC,MAAyB;QAChD,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;IAClE,CAAC;CACF;AAhDD,0BAgDC","file":"Cluster.js","sourcesContent":["import { EventEmitter } from 'events';\nimport ClusterNode, { ClusterNodeOptions } from '../ClusterNode';\nimport Player from '../core/Player';\nimport { VoiceStateUpdate, VoiceServerUpdate } from './Node';\n\nexport default abstract class Cluster extends EventEmitter {\n  public abstract send(guildID: string, packet: any): Promise<any>;\n  public abstract filter: (node: ClusterNode, guildID: string) => boolean;\n\n  public readonly nodes: ClusterNode[] = [];\n\n  constructor(options?: ClusterNodeOptions[]) {\n    super();\n    if (options) this.spawn(options);\n  }\n\n  public spawn(options: ClusterNodeOptions): ClusterNode;\n  public spawn(options: ClusterNodeOptions[]): ClusterNode[];\n  public spawn(options: ClusterNodeOptions | ClusterNodeOptions[]): ClusterNode | ClusterNode[] {\n    if (Array.isArray(options)) return options.map(opt => this.spawn(opt));\n\n    const node = new ClusterNode(this, options);\n    this.nodes.push(node);\n    return node;\n  }\n\n  public sort(): ClusterNode[] {\n    // filter nodes for open ws connections and restrict to specified tag (if provided)\n    return this.nodes.slice().sort((a, b) => { // sort by overall system cpu load\n      if (!a.stats || !b.stats) return -1;\n      return (a.stats.cpu ? a.stats.cpu.systemLoad / a.stats.cpu.cores : 0)\n        - (b.stats.cpu ? b.stats.cpu.systemLoad / b.stats.cpu.cores : 0);\n    });\n  }\n\n  public has(guildID: string): boolean {\n    return this.nodes.some(node => node.players.has(guildID));\n  }\n\n  public get(guildID: string): Player {\n    let node = this.nodes.find(node => node.players.has(guildID));\n    if (!node) node = this.sort().find(node => this.filter(node, guildID));\n    if (node) return node.players.get(guildID);\n    throw new Error('unable to find appropriate node; please check your filter');\n  }\n\n  public voiceStateUpdate(state: VoiceStateUpdate): Promise<boolean> {\n    return this.get(state.guild_id).node.voiceStateUpdate(state);\n  }\n\n  public voiceServerUpdate(server: VoiceServerUpdate): Promise<boolean> {\n    return this.get(server.guild_id).node.voiceServerUpdate(server);\n  }\n}\n"],"sourceRoot":"../../src"}